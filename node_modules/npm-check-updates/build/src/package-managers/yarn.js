'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.patch = exports.minor = exports.greatest = exports.newest = exports.latest = exports.list = exports.defaultPrefix = void 0;
// eslint-disable-next-line fp/no-events
const events_1 = require("events");
const lodash_1 = __importDefault(require("lodash"));
const cint_1 = __importDefault(require("cint"));
const semver_1 = __importDefault(require("semver"));
const spawn_please_1 = __importDefault(require("spawn-please"));
const libnpmconfig_1 = __importDefault(require("libnpmconfig"));
const jsonlines_1 = __importDefault(require("jsonlines"));
const versionUtil = __importStar(require("../version-util"));
const npm_1 = require("./npm");
const TIME_FIELDS = ['modified', 'created'];
// needed until pacote supports full yarn config compatibility
// See: https://github.com/zkat/pacote/issues/156
const yarnConfig = {};
libnpmconfig_1.default.read().forEach((value, key) => {
    // replace env ${VARS} in strings with the process.env value
    yarnConfig[key] = typeof value !== 'string' ?
        value :
        value.replace(/\${([^}]+)}/, (_, envVar) => process.env[envVar]);
});
yarnConfig.cache = false;
/**
 * @typedef {object} CommandAndPackageName
 * @property {string} command
 * @property {string} packageName
 */
/**
 * Parse JSON lines and throw an informative error on failure.
 *
 * @param result    Output from `yarn list --json` to be parsed
 */
async function parseJsonLines(result) {
    const dependencies = {};
    const parser = jsonlines_1.default.parse();
    parser.on('data', d => {
        // only parse info data
        // ignore error info, e.g. "Visit https://yarnpkg.com/en/docs/cli/list for documentation about this command."
        if (d.type === 'info' && !d.data.match(/^Visit/)) {
            // parse package name and version number from info data, e.g. "nodemon@2.0.4" has binaries
            const [, pkgName, pkgVersion] = d.data.match(/"(@?.*)@(.*)"/) || [];
            dependencies[pkgName] = {
                version: pkgVersion,
                from: pkgName,
            };
        }
        else if (d.type === 'error') {
            throw new Error(d.data);
        }
    });
    parser.write(result);
    parser.end();
    await (0, events_1.once)(parser, 'end');
    return { dependencies };
}
/**
 * @param versions  Array of all available versions
 * @param pre     Enabled prerelease?
 * @returns         An array of versions with the release versions filtered out
 */
function filterOutPrereleaseVersions(versions, pre) {
    return pre ? versions : versions.filter(version => !versionUtil.isPre(version));
}
/**
 * @param versions            Object with all versions
 * @param nodeEngineVersion   Package engines.node range
 * @returns An array of versions which satisfies engines.node range
 */
function doesSatisfyEnginesNode(versions, nodeEngineVersion) {
    if (!versions)
        return [];
    if (!nodeEngineVersion)
        return Object.keys(versions);
    const minVersion = lodash_1.default.get(semver_1.default.minVersion(nodeEngineVersion), 'version');
    if (!minVersion)
        return Object.keys(versions);
    return versions.filter(version => {
        const versionEnginesNode = lodash_1.default.get(version, 'engines.node');
        return versionEnginesNode &&
            semver_1.default.satisfies(minVersion, versionEnginesNode);
    });
}
/**
 * Spawn yarn requires a different command on Windows.
 *
 * @param args
 * @param [yarnOptions={}]
 * @param [spawnOptions={}]
 * @returns
 */
async function spawnYarn(args, yarnOptions = {}, spawnOptions) {
    const cmd = process.platform === 'win32' ? 'yarn.cmd' : 'yarn';
    const fullArgs = [
        ...yarnOptions.global ? 'global' : [],
        ...Array.isArray(args) ? args : [args],
        '--depth=0',
        ...yarnOptions.prefix ? `--prefix=${yarnOptions.prefix}` : [],
        '--json',
        '--no-progress'
    ];
    return (0, spawn_please_1.default)(cmd, fullArgs, spawnOptions);
}
/**
 * Get platform-specific default prefix to pass on to yarn.
 *
 * @param options
 * @param [options.global]
 * @param [options.prefix]
 * @returns
 */
async function defaultPrefix(options) {
    if (options.prefix) {
        return Promise.resolve(options.prefix);
    }
    const cmd = process.platform === 'win32' ? 'yarn.cmd' : 'yarn';
    const prefix = await (0, spawn_please_1.default)(cmd, ['global', 'dir'])
        // yarn 2.0 does not support yarn global
        // catch error to prevent process from crashing
        // https://github.com/raineorshine/npm-check-updates/issues/873
        .catch(() => { });
    // FIX: for ncu -g doesn't work on homebrew or windows #146
    // https://github.com/raineorshine/npm-check-updates/issues/146
    return options.global && prefix && prefix.match('Cellar')
        ? '/usr/local'
        // Workaround: get prefix on windows for global packages
        // Only needed when using npm api directly
        : process.platform === 'win32' && options.global && !process.env.prefix ?
            prefix ? prefix.trim() : `${process.env.LOCALAPPDATA}\\Yarn\\Data\\global` :
            null;
}
exports.defaultPrefix = defaultPrefix;
/**
 * @param [options]
 * @param [options.cwd]
 * @param [options.global]
 * @param [options.prefix]
 * @returns
 */
const list = async (options = {}, spawnOptions) => {
    const jsonLines = await spawnYarn('list', options, {
        ...options.cwd ? { cwd: options.cwd } : {},
        ...spawnOptions,
    });
    const json = await parseJsonLines(jsonLines);
    return cint_1.default.mapObject(json.dependencies, (name, info) => ({
        // unmet peer dependencies have a different structure
        [name]: info.version || (info.required && info.required.version),
    }));
};
exports.list = list;
/**
 * @param packageName
 * @param currentVersion
 * @param options
 * @returns
 */
const latest = async (packageName, currentVersion, options = {}) => {
    const latest = await (0, npm_1.viewOne)(packageName, 'dist-tags.latest', currentVersion, options);
    // if latest exists and latest is not a prerelease version, return it
    // if latest exists and latest is a prerelease version and --pre is specified, return it
    // if latest exists and latest not satisfies min version of engines.node
    if (latest && (!versionUtil.isPre(latest.version) || options.pre) &&
        doesSatisfyEnginesNode([latest], options.nodeEngineVersion).length) {
        return latest.version;
        // if latest is a prerelease version and --pre is not specified, find the next
        // version that is not a prerelease
    }
    else {
        const versions = await (0, npm_1.viewOne)(packageName, 'versions', currentVersion);
        const versionsSatisfyingNodeEngine = doesSatisfyEnginesNode(versions, options.nodeEngineVersion);
        return lodash_1.default.last(filterOutPrereleaseVersions(versionsSatisfyingNodeEngine, !!options.pre)) || null;
    }
};
exports.latest = latest;
/**
 * @param packageName
 * @param currentVersion
 * @param options
 * @returns
 */
const newest = (packageName, currentVersion, options = {}) => {
    return (0, npm_1.viewManyMemoized)(packageName, ['time', 'versions'], currentVersion, options).then(result => {
        // todo
        const versions = doesSatisfyEnginesNode(result.versions, options.nodeEngineVersion);
        return Object.keys(result.time || {}).reduce((accum, key) => accum.concat(TIME_FIELDS.includes(key) || versions.includes(key) ? key : []), []);
    }).then(lodash_1.default.partialRight(lodash_1.default.pullAll, TIME_FIELDS)).then(versions => lodash_1.default.last(filterOutPrereleaseVersions(versions, options.pre == null || options.pre)) || null);
};
exports.newest = newest;
/**
 * @param packageName
 * @param currentVersion
 * @param options
 * @returns
 */
const greatest = async (packageName, currentVersion, options = {}) => {
    const versions = await (0, npm_1.viewOne)(packageName, 'versions', currentVersion, options);
    // eslint-disable-next-line fp/no-mutating-methods
    return lodash_1.default.last(filterOutPrereleaseVersions(doesSatisfyEnginesNode(versions, options.nodeEngineVersion), options.pre == null || options.pre).sort(versionUtil.compareVersions)) || null;
};
exports.greatest = greatest;
/**
 * @param packageName
 * @param currentVersion
 * @param options
 * @returns
 */
const minor = async (packageName, currentVersion, options = {}) => {
    const versions = await (0, npm_1.viewOne)(packageName, 'versions', currentVersion, options);
    return versionUtil.findGreatestByLevel(filterOutPrereleaseVersions(doesSatisfyEnginesNode(versions, options.nodeEngineVersion), !!options.pre), currentVersion, 'minor');
};
exports.minor = minor;
/**
 * @param packageName
 * @param currentVersion
 * @param options
 * @returns
 */
const patch = async (packageName, currentVersion, options = {}) => {
    const versions = await (0, npm_1.viewOne)(packageName, 'versions', currentVersion, options);
    return versionUtil.findGreatestByLevel(filterOutPrereleaseVersions(doesSatisfyEnginesNode(versions, options.nodeEngineVersion), !!options.pre), currentVersion, 'patch');
};
exports.patch = patch;
exports.default = spawnYarn;
//# sourceMappingURL=yarn.js.map